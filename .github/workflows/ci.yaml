name: Build

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04
    outputs:
      MATTERMOST_VERSION: ${{ steps.build.outputs.MATTERMOST_VERSION }}
      NEWTAG: ${{ steps.tag.outputs.newtag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version-file: '.java-version'

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Configure Gradle Properties
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p ~/.gradle
          echo "MATTERMOST_RELEASE_KEY_ALIAS=mattermost" > ~/.gradle/gradle.properties
          echo "MATTERMOST_RELEASE_PASSWORD=${{ secrets.MATTERMOST_RELEASE_PASSWORD }}" >> ~/.gradle/gradle.properties
          echo "MATTERMOST_RELEASE_STORE_FILE=${HOME}/.gradle/mattermost.keystore" >> ~/.gradle/gradle.properties
          echo ${{ secrets.MATTERMOST_KEYSTORE }} | base64 -d > ~/.gradle/mattermost.keystore

      - name: Build
        id: build
        run: |
          set -euxo pipefail

          # If the commit is a push to master, type should be debug
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            BUILD_TYPE=release
          else
            BUILD_TYPE=debug
          fi

          bash build.sh ${BUILD_TYPE}

          # Exit if .buildinfo is empty or does not exist
          [ -s .buildinfo ]

          # Exit if apk does not exist
          [ -s Mattermost.apk ]

          # Set output variables
          for line in $(cat .buildinfo); do
            echo "$line" >> $GITHUB_OUTPUT
          done
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

      - name: Upload APK on PR
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: Mattermost
          path: '*.apk'

      - name: Find latest tag
        id: tagger
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: jimschubert/query-tag-action@v2
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: 'HEAD'

      - name: Create tag if Mattermost app version is changed
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{steps.tagger.outputs.tag}}'
            const version = '${{steps.build.outputs.MATTERMOST_VERSION}}'

            if (tag != version) {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/' + version,
                sha: context.sha
              })
              core.setOutput('newtag', 'true')
            } else {
              core.setOutput('newtag', 'false')
            }

      - uses: ncipollo/release-action@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.tag.outputs.newtag == 'true'
        with:
          artifacts: '*.apk'
          tag: ${{steps.build.outputs.MATTERMOST_VERSION}}
          name: ${{steps.build.outputs.MATTERMOST_VERSION}}
          draft: false
          makeLatest: true
          body: |
            [Mattermost Android ${{steps.build.outputs.MATTERMOST_VERSION}}](https://github.com/mattermost/mattermost-mobile/releases/tag/${{steps.build.outputs.MATTERMOST_VERSION}})

      - name: Cleanup keystore
        if: always()
        run: |
          shred -n 5 -f ~/.gradle/mattermost.keystore || true
          shred -n 5 -f ~/.gradle/gradle.properties || true

  fdroid:
    needs: [ build ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build.outputs.NEWTAG == 'true'
    permissions:
      id-token: write
      pages: write
      contents: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout fdroid branch
      uses: actions/checkout@v4
      with:
        ref: fdroid
        fetch-depth: 0
        path: fdroid

    - name: Install fdroid server
      run: |
        cd fdroid
        echo -n '${{ secrets.FDROID_KEYSTORE }}' | base64 -d > keystore.jks
        chmod 600 keystore.jks config.yml
        mkdir -p repo
        sudo add-apt-repository ppa:fdroid/fdroidserver
        sudo apt-get update
        sudo apt-get install fdroidserver

    - name: Download apk
      uses: robinraju/release-downloader@v1
      with:
        tag: "${{ github.event.release.tag_name }}"
        latest: true
        fileName: "Mattermost.apk"

    - name: Move apk to fdroid
      run: mv Mattermost.apk fdroid/repo/dev.mcswain.mattermost-${{ github.event.release.tag_name }}.apk

    - name: Setup GPG
      id: import-gpg
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Run fdroid update
      run: |
        cd fdroid
        fdroid update --pretty
        mkdir /home/runner/work/fdroid
        fdroid deploy
      env:  
        FDROID_KEYPASS: "${{ secrets.FDROID_KEY_PASSWORD }}"
        FDROID_KEY_STORE_PASS: "${{ secrets.FDROID_KEY_STORE_PASS }}"

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '/home/runner/work/fdroid/'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Shred keystore
      if: always()
      run: |
        shred -n 5 -f fdroid/keystore.jks || true 